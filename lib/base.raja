#
# Base lib for raja
#

# Builtin types:
# alias Int
# alias Float
# alias Str
# alias List
# alias Fn

alias Tuple = [_, _]

alias Bool = false | true

alias Num = Int | Float

alias Iterator = List | Str

alias Any = _



# Wrapping builtin functions so that they can be overloaded.
# (builtin) functions cannot be overloaded.

string = (a) => __string(a)
int = (a:Str) => __int(a)
# float = (a:Str) => __float(a)
print = (a) => __print(a)
read_file = (a:Str) => __read_file(a)
get_args = () => __args()
get_unsafe = (a:Iterator, b:Int) => __index(a, b, true)
get = (a:Iterator, b:Int) => __index(a, b, false)
exit = (a) => __exit(a)
length = (a:Iterator) => __length(a)


# Print with ending newline.
# Also stringyfies arguments
println = () => print("\n")
println = (a) => print(a.string() ++ "\n")
println = (a, b) => print(a.string() ++ " " ++ b.string() ++ "\n")
println = (a, b, c) => {
	as = a.string()
	bs = b.string()
	cs = c.string()
	print(as ++ " " ++ bs ++ " " ++ cs ++ "\n")
}

# Run function over a, and return a.
#
# Useful in pipelines where you want to run IO or similar and want to keep the existing value
with_identity = (a, f) => {
	f(a)
	a
}

is = (a, b) => a == b

panic = (a) => {
	println("Panic: ", a)
	exit(1)
}

panic = (a, b) => {
	println("Panic: ", a, b)
	exit(1)
}


assert = (a, explanation:Str) => match a {
	true -> a
	_		 ->  {
		println("Assert failed: ", explanation)
		exit(1)
	}
}

falsy? = (a) => match a {
	[]		-> true
	""		-> true
	0			-> true
	false -> true
}

default = (a:List) => []
default = (a:Str) => ""
default = (a:Num) => 0
default = (a:Bool) => false
default = (a, b) => match falsy?(a) {
	true -> b
	_		 -> a
}


append = (a, b) => a ++ b
append = (a:List, b:List) => a ++ b
append = (a:List, b) => a ++ [b]
append = (a, b:List) => [a] ++ b
prepend = (a, b) => append(b, a)

#
# Types
#


# Result

alias Result =
		Result::Ok(_)
	| Result::Err(_)

to_ok = (a) => Result::Ok(a)

to_err = (a) => Result::Err(a)

unwrap = (r:Result) => match r {
	Result::Ok(a) -> a
	Result::Err(_) -> panic("Trying to unwrap:", r)
}

unwrap_err = (r:Result) => match r {
	Result::Err(e) -> e
	Result::Ok(_) -> panic("Trying to unwrap_err:", r)
}


map = (r:Result, f:Fn) => match r {
	Result::Ok(a) -> Result::Ok(f(a))
	_							-> r
}

map_err = (r:Result, f:Fn) => match r {
	Result::Err(a) -> Result::Err(f(a))
	_							-> r
}

unwrap_or = (r:Result, o) => match r {
	Result::Ok(a) -> a
	_							-> o
}

unwrap_or = (r:Result, f:Fn) => match r {
	Result::Ok(a)    -> a
	Result::Err(err) -> f(err)
}

and = (res:Result, a:Result) => match res {
	Result::Ok(_) -> a
	_							-> res
}

and_then = (res:Result, f:Fn) => match res {
	Result::Ok(a) -> f(a)
	_							-> res
}




# Maybe type

alias Maybe =
		Maybe::Some(_)
	| Maybe::None

to_some = (a) => Maybe::Some(a)

to_maybe = (res:Result) => match res {
	Result::Ok(a) -> to_some(a)
	_							-> Maybe::None
}
unwrap = (m:Maybe) => match m {
	Maybe::Some(a) -> a
	Maybe::None		 -> panic("Trying to unwrap Maybe::None")
}

map = (m:Maybe, f:Fn) => match m {
	Maybe::Some(a) -> Maybe::Some(f(a))
	_							 -> m
}

unwrap_or = (m:Maybe, o) => match m {
	Maybe::Some(a) -> a
	_							 -> o
}

unwrap_or = (m:Maybe, f:Fn) => match m {
	Maybe::Some(a) -> a
	Maybe::None    -> f()
}

and = (m:Maybe, a) => match m {
	Maybe::Some(_) -> a
	_							 -> m
}

and_then = (m:Maybe, f:Fn) => match m {
	Maybe::Some(a) -> f(a)
	_							 -> m
}

to_result = (m:Maybe, err) => match m {
	Maybe::Some(a)	-> to_ok(a)
	Maybe::None			-> to_err(err)
}



#
# List
#

# Returns a Maybe
head = (l:Iterator) => l.get(0)

# Returns a Maybe
last = (l:Iterator) => l.get(l.length() - 1)

# Take n from Iterator
take = (l:Iterator, n:Int, i:Int, acc:Iterator) => match (n > i) {
	true -> match l.get(i) {
		Maybe::Some(v) -> l.take(n, i + 1, acc ++ v)
		_              -> acc
	}
	false -> acc
}
take = (l:Iterator, n:Int) => l.take(n, 0, l.default())


# As a normal fold, but the function given needs to take three parameters:
# acc, element, i:Int
fold_index = (iter:Iterator, acc, f:Fn, i:Int) => match iter.get(i) {
	Maybe::Some(a) -> iter.fold_index(f(acc, a, i), f, i + 1)
		_						 -> acc
}
fold_index = (iter:Iterator, f:Fn) => iter.fold_index(iter.default(), f, 0)
fold_index = (iter:Iterator, acc, f:Fn) => iter.fold_index(acc, f, 0)

# Returns the Iterator without its first element.
# Given a second argument it returns the tail from index i
tail = (l:Iterator, i:Int) => l.fold_index((acc, e, ii) => match (i > ii) {
	true -> acc
	false -> acc ++ e
})
tail = (l:Iterator) => tail(l, 1)


fold = (iter:Iterator, accumulator, f:Fn) => {
	_fold = (acc, i) => match iter.get(i) {
		Maybe::Some(a) -> _fold(f(acc, a), i + 1)
		_							 -> acc
	}
	_fold(accumulator, 0)
}
# Uses iter to create a default value as the accumulator
fold = (iter:Iterator, f:Fn) => iter.fold(iter.default(), f)


map = (iter:Iterator, f:Fn) => iter.fold((acc, elem) => acc.append(f(elem)))

map_index = (iter:Iterator, f:Fn) => iter.fold_index((acc, elem, i) => acc.append(f(elem, i)))

# Map over only the last the last element
map_last = (iter:Iterator, f:Fn, n:Int) => iter.fold_index((acc, elem, i) => match (i == n) {
	true	-> acc.append(f(elem))
	false -> acc.append(elem)
})
map_last = (iter:Iterator, f:Fn) => iter.map_last(f, length(iter) - 1)



add = (a:Num, b:Num) => a + b
# Expects the list to contain only Num
sum = (list:List) => fold(list, 0, add)


# Create a list from a to b, with its corresponding index as content
range = (l:List, i:Int, b:Int) => match (b >= i) {
	true -> range(l ++ [i], i + 1, b)
	false -> l
}
range = (a:Int, b:Int) => range([], a, b)


# Str functions

# Doesnt really do anything, just a simple way to specify what the function expects instead of putting this into comments
alias Char = Str


has_prefix? = (a:Str, prefix:Str) =>
	a.take(length(prefix)) == prefix

has_prefix_at? = (a:Str, prefix:Str, i:Int) =>
	a.tail(i).has_prefix?(prefix)

is_whitespace? = (c:Char) => match c {
	" " -> true
	"\r" -> true
	"\n" -> true
	"\t" -> true
	_		 -> false
}

split_by = (a:Str, by:Str, acc:List, i:Int) => match a.has_prefix_at?(by, i) {
	true -> {
		is_ending = (i + by.length() == a.length())
		match is_ending {
			true -> acc
			false -> a.split_by(by, [acc, []], i + by.length())
		}
	}
	false -> match a.get(i) {
			Maybe::Some(v) -> match acc.length() {
				0 -> a.split_by(by, [v], i + 1)
				_ -> {
					newacc = acc.map_last((x) => x ++ (a.get(i).unwrap()))
					a.split_by(by, newacc, i + 1)
				}
			}
			Maybe::None -> acc
	}
}
split_by = (a:Str, by:Str) => a.split_by(by, [], 0)

# Remves whitespace characters at the beginning of the string
trim_left = (a:Str, i:Int) => match a.get(i).map(is_whitespace?) {
	Maybe::Some(true) -> a.trim_left(i + 1)
	_									-> a.tail(i)
}
trim_left = (a:Str) => a.trim_left(0)


# Removes whitespace characters at the end of the string
trim_right = (a:Str, i:Int) => match a.get(i).map(is_whitespace?) {
	Maybe::Some(true) -> trim_right(a, i - 1)
	_									-> a.take(i + 1)
}
trim_right = (a:Str) => a.trim_right(a.length() - 1)


# Removes any whitespace characters that are present at the start or end of a string
trim = (a:Str) => a.trim_left().trim_right()



#
# Sorting
#

alias SortOrder =
		SortOrder::Asc
	| SortOrder::Desc

# Divide list in two separate lists
into_two = (list:List) => {
	index = list.length() / 2
	[list.take(index), list.tail(index)]
}

# Takes in two already sorted lists, and merges them
_merge_msort = (left:List, right:List, so:SortOrder) => match [left, right] {
	[[], []] -> []
	[xs, []] -> xs
	[[], ys] -> ys
	[l, r]   -> {
		lh = l.head().unwrap()
		rh = r.head().unwrap()
		match so {
			SortOrder::Asc -> match (lh < rh) {
				true -> [lh].append(_merge_msort(r, l.tail(), so))
				_    -> [rh].append(_merge_msort(l, r.tail(), so))
			}
			SortOrder::Desc -> match (lh > rh) {
				true -> [lh].append(_merge_msort(r, l.tail(), so))
				_    -> [rh].append(_merge_msort(l, r.tail(), so))
			}
		}
	}
}

msort = (list:List, so:SortOrder) => match list.length() {
	0, 1 -> list
	_    -> {
		divided = list.into_two()
		left = msort(divided.get(0).unwrap(), so)
		right = msort(divided.get(1).unwrap(), so)
		_merge_msort(left, right, so)
	}
}

# Default sorting algorithm is currently merge sort
# Default is ASC, but can be specified
sort = (list:List) => list.msort(SortOrder::Asc)
sort = (list:List, so:SortOrder) => list.msort(so)
