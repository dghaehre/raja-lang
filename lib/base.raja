#
# Base lib for raja
#

# Wrapping builtin functions so that they can be overloaded.
# (builtin) functions cannot be overloaded.

string = (a) => __string(a)
print = (a) => __print(a)
read_file = (a:Str) => __read_file(a)
get_args = () => __args()
get_unsafe = (a:Iterator, b:Int) => __index(a, b, true)
get = (a:Iterator, b:Int) => __index(a, b, false)
exit = (a) => __exit(a)


# Builtin types:
# alias Int
# alias Float
# alias Str
# alias List

alias Tuple = [_, _]

alias Bool = false | true

alias Num = Int | Float

alias Iterator = List | Str



# Print with ending newline.
# Also stringyfies arguments
println = () => print("\n")
println = (a) => print(a.string() ++ "\n")
println = (a, b) => print(a.string() ++ " " ++ b.string() ++ "\n")
println = (a, b, c) => {
	as = a.string()
	bs = b.string()
	cs = c.string()
	print(as ++ " " ++ bs ++ " " ++ cs ++ "\n")
}

# Run function over a, and return a.
#
# Useful in pipelines where you want to run IO or similar and want to keep the existing value
with_identity = (a, f) => {
	f(a)
	a
}

is = (a, b) => a == b

panic = (a) => {
	println("Panic: ", a)
	exit(1)
}

panic = (a, b) => {
	println("Panic: ", a, b)
	exit(1)
}


assert = (a, explanation:Str) => match a {
	true -> a
	_		 ->  {
		println("Assert failed: ", explanation)
		exit(1)
	}
}

falsy? = (a) => match a {
	[]		-> true
	""		-> true
	0			-> true
	false -> true
}

default = (a:List) => []
default = (a:Str) => ""
default = (a:Num) => 0
default = (a:Bool) => false
default = (a, b) => match falsy?(a) {
	true -> b
	_		 -> a
}


append = (a, b) => a ++ b
append = (a:List, b:List) => a ++ b
append = (a:List, b) => a ++ [b]
append = (a, b:List) => [a] ++ b
prepend = (a, b) => append(b, a)

#
# Types
#


# Result

alias Result =
		Result::Ok(_)
	| Result::Err(_)

to_ok = (a) => Result::Ok(a)

to_err = (a) => Result::Err(a)

unwrap = (r:Result) => match r {
	Result::Ok(a) -> a
	Result::Err(_) -> panic("Trying to unwrap:", r)
}

unwrap_err = (r:Result) => match r {
	Result::Err(e) -> e
	Result::Ok(_) -> panic("Trying to unwrap_err:", r)
}


map = (r:Result, f:Fn) => match r {
	Result::Ok(a) -> Result::Ok(f(a))
	_							-> r
}

map_err = (r:Result, f:Fn) => match r {
	Result::Err(a) -> Result::Err(f(a))
	_							-> r
}

unwrap_or = (r:Result, o) => match r {
	Result::Ok(a) -> a
	_							-> o
}

and = (res:Result, a:Result) => match res {
	Result::Ok(_) -> a
	_							-> res
}

and_then = (res:Result, f:Fn) => match res {
	Result::Ok(a) -> f(a)
	_							-> res
}

to_maybe = (res:Result) => match res {
	Result::Ok(a) -> to_some(a)
	_							-> Maybe::None
}



# Maybe type

alias Maybe =
		Maybe::Some(_)
	| Maybe::None

to_some = (a) => Maybe::Some(a)

unwrap = (m:Maybe) => match m {
	Maybe::Some(a) -> a
	Maybe::None		 -> panic("Trying to unwrap Maybe::None")
}

map = (m:Maybe, f:Fn) => match m {
	Maybe::Some(a) -> Maybe::Some(f(a))
	_							 -> m
}

unwrap_or = (m:Maybe, o) => match m {
	Maybe::Some(a) -> a
	_							 -> o
}

and = (m:Maybe, a) => match m {
	Maybe::Some(_) -> a
	_							 -> m
}

and_then = (m:Maybe, f:Fn) => match res {
	Maybe::Some(a) -> f(a)
	_							 -> res
}

to_result = (m:Maybe, err) => match m {
	Maybe::Some(a)	-> to_ok(a)
	Maybe::None			-> to_err(err)
}



#
# List
#

# Returns a Maybe
head = (l:Iterator) => l.get(0)

# Returns a Maybe
last = (l:Iterator) => l.get(l.length() - 1)

# Take n from Iterator
take = (l:Iterator, n:Int) => {
	_take = (acc, i) => match (n > i) {
		true -> match l.get(i) {
			Maybe::Some(v) -> _take(acc ++ v, i + 1)
			_              -> acc
		}
		false -> acc
	}
	_take(l.default(), 0)
}

# Return tail of Iterator from index i
tail = (l:Iterator, i:Int) => l.fold_index((acc, e, ii) => match (i > ii) {
	true -> acc
	false -> acc ++ e
})

# Returns the Iterator without its first element.
tail = (l:Iterator) => tail(l, 1)

length = (list:Iterator) => {
	_length = (i) => match list.get(i) {
		Maybe::None -> i
		_						-> _length(i + 1)
	}
	_length(0)
}

fold = (iter:Iterator, accumulator, f:Fn) => {
	_fold = (acc, i) => match iter.get(i) {
		Maybe::Some(a) -> _fold(f(acc, a), i + 1)
		_							 -> acc
	}
	_fold(accumulator, 0)
}
# Uses iter to create a default value as the accumulator
fold = (iter:Iterator, f:Fn) => iter.fold(iter.default(), f)


fold_index = (iter:Iterator, accumulator, f:Fn) => {
	_fold = (acc, i) => match iter.get(i) {
		Maybe::Some(a) -> _fold(f(acc, a, i), i + 1)
		_							 -> acc
	}
	_fold(accumulator, 0)
}
# Uses iter to create a default value as the accumulator
fold_index = (iter:Iterator, f:Fn) => iter.fold_index(iter.default(), f)


map = (iter:Iterator, f:Fn) => fold(iter, (acc, elem) => acc.append(f(elem))) 


# Expects the list to contain only Num
sum = (list:List) => fold(list, 0, add)

# Create a list from a to b, with its corresponding index as content
range = (a:Int, b:Int) => {
	_range = (l, i) => match (b >= i) {
		true -> _range(l ++ [i], i + 1)
		false -> l
	}
	_range([], a)
}


# Num functions

increment = (n:Num) => n + 1

add = (a:Num, b:Num) => a + b


# Str functions

# Doesnt really do anything, just a simple way to specify what the function expects instead of putting this into comments
alias Char = Str


has_prefix? = (a:Str, prefix:Str) =>
	a.take(length(prefix)) == prefix

has_prefix_at? = (a:Str, prefix:Str, i:Int) =>
	a.tail(i).has_prefix?(prefix)

is_whitespace? = (c:Char) => match c {
	" " -> true
	"\r" -> true
	"\n" -> true
	"\t" -> true
	_		 -> false
}

split_by = (a:Str, by:Str) => {
	panic("todo")
}

# Remves whitespace characters at the beginning of the string
left_trim = (a:Str) => {
	_left_trim = (i) => match a.get(i).map(is_whitespace?) {
		Maybe::Some(true) -> _left_trim(i + 1)
		_									-> a.tail(i)
	}
	_left_trim(0)
}

# Removes whitespace characters at the end of the string
trim_right = (a:Str) => {
	_trim_right = (i) => match a.get(i).map(is_whitespace?) {
		Maybe::Some(true) -> _trim_right(i - 1)
		_									-> a.take(i + 1)
	}
	_trim_right(a.length() - 1)
}


# Removes any whitespace characters that are present at the start or end of a string
trim = (a:Str) => a.left_trim().trim_right()
