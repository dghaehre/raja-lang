#
# Base lib for raja
#

# Wrapping builtin functions so that they can be overloaded.
# (builtin) functions cannot be overloaded.

string = (a) => __string(a)
print = (a) => __print(a)
get_args = (a) => __args(a)
get_unsafe = (a, b) => __index(a, b, true)
get = (a, b) => __index(a, b, false)
exit = (a) => __exit(a)


# Builtin types:
# alias Int
# alias Float
# alias Str
# alias List

alias Tuple = [_, _]

alias Bool = false | true

alias Num = Int | Float

alias Iterator = List | Str



# Print with ending newline.
# Also stringyfies arguments
println = () => print("\n")
println = (a) => print(a.string() ++ "\n")
println = (a, b) => {
	as = a.string()
	bs = b.string()
	print(as ++ " " ++ bs ++ "\n")
}
println = (a, b, c) => {
	as = a.string()
	bs = b.string()
	cs = c.string()
	print(as ++ " " ++ bs ++ " " ++ cs ++ "\n")
}

# Run function over a, and return a.
#
# Useful in pipelines where you want to run IO or similar and want to keep the existing value
with_identity = (a, f) => {
	f(a)
	a
}

is = (a, b) => a == b

panic = (a) => {
	println("Panic: ", a)
	exit(1)
}

assert = (a, explanation:Str) => match a {
	true -> a
	_		 ->  {
		println("Assert failed: ", explanation)
		exit(1)
	}
}

falsy? = (a) => match a {
	[]		-> true
	""		-> true
	0			-> true
	false -> true
}

default = (a:List) => []
default = (a:Str) => ""
default = (a:Num) => 0
default = (a:Bool) => false
default = (a, b) => match falsy?(a) {
	true -> b
	_		 -> a
}


append = (a, b) => a ++ b
append = (a:List, b:List) => a ++ b
append = (a:List, b) => a ++ [b]
append = (a, b:List) => [a] ++ b
prepend = (a, b) => append(b, a)

#
# Types
#


# Result

alias Result =
		Result::Ok(_)
	| Result::Err(_)

to_ok = (a) => Result::Ok(a)

to_err = (a) => Result::Err(a)

unwrap = (r:Result) => r.get_unsafe(0)

map = (r:Result, f:Fn) => match r {
	Result::Ok(_) -> Result::Ok(f(r.unwrap()))
	_							-> r
}

map_err = (r:Result, f:Fn) => match r {
	Result::Err(_) -> Result::Err(f(r.unwrap()))
	_							-> r
}

unwrap_or = (r:Result, a) => match r {
	Result::Ok(_) -> r.unwrap()
	_							-> a
}

and = (res:Result, a:Result) => match res {
	Result::Ok(_) -> a
	_							-> res
}

and_then = (res:Result, f:Fn) => match res {
	Result::Ok(_) -> f(res.unwrap())
	_							-> res
}

to_maybe = (res:Result) => match res {
	Result::Ok(_) -> to_some(res.unwrap())
	_							-> Maybe::None
}



# Maybe type

alias Maybe =
		Maybe::Some(_)
	| Maybe::None

to_some = (a) => Maybe::Some(a)

unwrap = (m:Maybe) => m.get_unsafe(0)

map = (m:Maybe, f:Fn) => match m {
	Maybe::Some(_) -> Maybe::Some(f(m.unwrap()))
	_							 -> m
}

unwrap_or = (m:Maybe, a) => match m {
	Maybe::Some(_) -> m.unwrap()
	_							 -> a
}

and = (m:Maybe, a) => match m {
	Maybe::Some(_) -> a
	_							 -> m
}

and_then = (m:Maybe, f:Fn) => match res {
	Maybe::Some(_) -> f(m.unwrap())
	_							 -> res
}

to_result = (m:Maybe, err) => match m {
	Maybe::Ok(_)	-> to_ok(m.unwrap())
	Maybe::None		-> to_err(err)
}



#
# List
#

# TODO: fold

length = (list:Iterator) => {
	_length = (l, i) => match l.get(i) {
		Maybe::None -> i
		_ -> _length(l, (i + 1))
	}
	_length(list, 0)
}

fold = (iter:Iterator, f:Fn, accumulator) => {
	_fold = (acc, i) => {
		x = iter.get(i)
		match x {
			Maybe::Some(_) -> {
				res = f(acc, x.unwrap())
				_fold(res, i + 1)
			}
			_ -> acc
		}
	}
	_fold(accumulator, 0)
}

map = (iter:Iterator, f:Fn) => {
	acc_fn = (acc, elem) => acc.append(f(elem))
	fold(iter, acc_fn, iter.default()) 
}


# Expects the list to contain only Num
sum = (list:List) => {
	_sum = (l, i, s) => match l.get(i) {
		Maybe::Some(_) -> {
			v = l.get(i)
			newsum = v.unwrap() + s
			_sum(l, (i + 1), newsum)
		}
		_ -> s
	}
	_sum(list, 0, 0)
}


# Create a list from a to b, with its corresponding index as content
range = (a:Int, b:Int) => {
	assert(b > a, "First argument in range needs to be bigger than second argument")
	_range = (l, i) => match (b > i) {
		true -> _range(l ++ [i], i + 1)
		false -> l
	}
	_range([], a)
}


# Num functions

increment = (n:Num) => n + 1


# Str functions

# Doesnt really do anything, just a simple way to specify what the function expects
alias Char = Str

# uppercase = (s:Char) => match s {
